# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from utils import tf_pb2 as tf__pb2


class masterStub(object):
  """表示Master服务类，定义其可供远程调用的方法
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.register_cluster = channel.unary_unary(
        '/protos.master/register_cluster',
        request_serializer=tf__pb2.cluster.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.notice_train = channel.unary_unary(
        '/protos.master/notice_train',
        request_serializer=tf__pb2.note.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.worker_notice_master_finished = channel.unary_unary(
        '/protos.master/worker_notice_master_finished',
        request_serializer=tf__pb2.worker_note.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.ps_notice_master_pull_data_finished = channel.unary_unary(
        '/protos.master/ps_notice_master_pull_data_finished',
        request_serializer=tf__pb2.note.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )


class masterServicer(object):
  """表示Master服务类，定义其可供远程调用的方法
  """

  def register_cluster(self, request, context):
    """初始化集群，建立与ps,worker间连接
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def notice_train(self, request, context):
    """供Client调用来通知开始训练，返回已收到开始训练
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def worker_notice_master_finished(self, request, context):
    """提供给worker调用告诉master自己已经完成了迭代
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ps_notice_master_pull_data_finished(self, request, context):
    """提供ps調用通知master自己完成了数据提取工作
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_masterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'register_cluster': grpc.unary_unary_rpc_method_handler(
          servicer.register_cluster,
          request_deserializer=tf__pb2.cluster.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'notice_train': grpc.unary_unary_rpc_method_handler(
          servicer.notice_train,
          request_deserializer=tf__pb2.note.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'worker_notice_master_finished': grpc.unary_unary_rpc_method_handler(
          servicer.worker_notice_master_finished,
          request_deserializer=tf__pb2.worker_note.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'ps_notice_master_pull_data_finished': grpc.unary_unary_rpc_method_handler(
          servicer.ps_notice_master_pull_data_finished,
          request_deserializer=tf__pb2.note.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protos.master', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class psStub(object):
  """ParameterServer服务类
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.register_cluster = channel.unary_unary(
        '/protos.ps/register_cluster',
        request_serializer=tf__pb2.cluster.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.send_weight = channel.unary_unary(
        '/protos.ps/send_weight',
        request_serializer=tf__pb2.step.SerializeToString,
        response_deserializer=tf__pb2.array_weight.FromString,
        )
    self.master_notice_ps_to_pull_data_from_worker = channel.unary_unary(
        '/protos.ps/master_notice_ps_to_pull_data_from_worker',
        request_serializer=tf__pb2.worker_fin_ip.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.master_notice_ps_aggregate = channel.unary_unary(
        '/protos.ps/master_notice_ps_aggregate',
        request_serializer=tf__pb2.note.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )


class psServicer(object):
  """ParameterServer服务类
  """

  def register_cluster(self, request, context):
    """初始化集群，建立与workers和master间连接
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def send_weight(self, request, context):
    """worker远程调用ps的方法
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def master_notice_ps_to_pull_data_from_worker(self, request, context):
    """供master调用
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def master_notice_ps_aggregate(self, request, context):
    """供master调用来通知master来聚合数据
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_psServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'register_cluster': grpc.unary_unary_rpc_method_handler(
          servicer.register_cluster,
          request_deserializer=tf__pb2.cluster.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'send_weight': grpc.unary_unary_rpc_method_handler(
          servicer.send_weight,
          request_deserializer=tf__pb2.step.FromString,
          response_serializer=tf__pb2.array_weight.SerializeToString,
      ),
      'master_notice_ps_to_pull_data_from_worker': grpc.unary_unary_rpc_method_handler(
          servicer.master_notice_ps_to_pull_data_from_worker,
          request_deserializer=tf__pb2.worker_fin_ip.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'master_notice_ps_aggregate': grpc.unary_unary_rpc_method_handler(
          servicer.master_notice_ps_aggregate,
          request_deserializer=tf__pb2.note.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protos.ps', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class workerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.register_cluster = channel.unary_unary(
        '/protos.worker/register_cluster',
        request_serializer=tf__pb2.cluster.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.send_train_data = channel.unary_unary(
        '/protos.worker/send_train_data',
        request_serializer=tf__pb2.data.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.notice_start_train = channel.unary_unary(
        '/protos.worker/notice_start_train',
        request_serializer=tf__pb2.note.SerializeToString,
        response_deserializer=tf__pb2.status.FromString,
        )
    self.send_delta = channel.unary_unary(
        '/protos.worker/send_delta',
        request_serializer=tf__pb2.status.SerializeToString,
        response_deserializer=tf__pb2.delta.FromString,
        )


class workerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def register_cluster(self, request, context):
    """初始化集群，建立与ps间连接
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def send_train_data(self, request, context):
    """发送训练数据给给个worker
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def notice_start_train(self, request, context):
    """由master通知worker开始训练
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def send_delta(self, request, context):
    """由ps调用，获得worker计算的梯度
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_workerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'register_cluster': grpc.unary_unary_rpc_method_handler(
          servicer.register_cluster,
          request_deserializer=tf__pb2.cluster.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'send_train_data': grpc.unary_unary_rpc_method_handler(
          servicer.send_train_data,
          request_deserializer=tf__pb2.data.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'notice_start_train': grpc.unary_unary_rpc_method_handler(
          servicer.notice_start_train,
          request_deserializer=tf__pb2.note.FromString,
          response_serializer=tf__pb2.status.SerializeToString,
      ),
      'send_delta': grpc.unary_unary_rpc_method_handler(
          servicer.send_delta,
          request_deserializer=tf__pb2.status.FromString,
          response_serializer=tf__pb2.delta.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protos.worker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
